apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nrKubernetesOtel.deployment.configMap.fullname" . }}
  namespace: {{ .Release.Namespace }}
data:
  gateway-config.yaml: |
    reserved_melt_attributes:
      Metric:
        - interval.ms
        - metricName
  deployment-config.yaml: |
    {{- with include "nrKubernetesOtel.deployment.configMap.config" . }}
    {{- . | nindent 4 }}
    {{- else }}
    extensions:
      zpages:
      healthcheckv2:
        use_v2: true
        component_health:
          include_permanent_errors: false
          include_recoverable_errors: true
          recovery_duration: 5m
        http:
          endpoint: ${env:MY_POD_IP}:13133
          status:
            enabled: true
            path: "/health/status"
          config:
            enabled: true
            path: "/health/config"

    receivers:
      nrproprietaryreceiver:
        NrHost: {{ include "nrKubernetesOtel.NrHost.endpoint" . }}
        EnableDefaultHost: false
        Proxy: false
        Endpoints:
          event_api_endpoint: {{ include "nrKubernetesOtel.event.endpoint" . }}
          infra_event_api_endpoint: {{ include "nrKubernetesOtel.infra-event.endpoint" . }}
          log_api_endpoint: {{ include "nrKubernetesOtel.log.endpoint" . }}
          metrics_endpoint: {{ include "nrKubernetesOtel.metrics.endpoint" . }}
          traces_endpoint: {{ include  "nrKubernetesOtel.traces.endpoint" . }}
        server:
          endpoint: ${env:MY_POD_IP}:80
        client:
          compression: gzip
      otlp:
        protocols:
          http:
            endpoint: ${env:MY_POD_IP}:4318
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
      prometheus:
        config:
          scrape_configs:
            - job_name: 'pipeline-control-gateway'
              scrape_interval: 10s
              static_configs:
                - targets: [ '${env:MY_POD_IP}:8888' ]
                  labels:
                    version: {{ .Chart.Version }}
                    appVersion: {{ .Chart.AppVersion }}
      prometheus/ui:
        config:
           scrape_configs:
            - job_name: 'pipeline-gateway-ui-metrics'
              scrape_interval: 10s
              static_configs:
                - targets: [ '${env:MY_POD_IP}:8888' ]
                  labels:
                    version: {{ .Chart.Version }}
                    appVersion: {{ .Chart.AppVersion }}
              metric_relabel_configs:
                - source_labels: [ __name__ ]
                  regex: '.*bytes_(sent|received).*'
                  action: keep
      prometheus/usage:
        config:
          scrape_configs:
            - job_name: 'pipeline-gateway-usage'
              scrape_interval: 60s
              static_configs:
                - targets: [ '${env:MY_POD_IP}:8888' ]
                  labels:
                    version: {{ .Chart.Version }}
                    appVersion: {{ .Chart.AppVersion }}
              metric_relabel_configs:
                - source_labels: [ __name__ ]
                  regex: '.*bytes_received.*'
                  action: keep
      prometheus/monitoring:
        config:
          scrape_configs:
            - job_name: 'pipeline-gateway-monitoring'
              scrape_interval: 10s
              static_configs:
                - targets: [ '${env:MY_POD_IP}:8888' ]
                  labels:
                    version: {{ .Chart.Version }}
                    appVersion: {{ .Chart.AppVersion }}
              metric_relabel_configs:
                - source_labels: [ __name__ ]
                  regex: '.*bytes_(sent|received).*'
                  action: drop

    processors:
      memory_limiter:
        check_interval: 1s
        limit_mib: 100
      nrprocessor:
        queries:
          {{- range $value := .Values.processors.nrprocessor.queries }}
          - query:
              name: {{ $value.query.name | quote }}
              value: {{ $value.query.value | quote }}
              category: {{ $value.query.category | quote }}
          {{- end }}
      cumulativetodelta:

    exporters:
      debug:
        verbosity: detailed
      otlp:
        endpoint: {{ include "nrKubernetesOtel.grpc.endpoint" . }}
        headers:
          api-key: ${env:NEW_RELIC_LICENSE_KEY}
      otlphttp:
        endpoint: {{ include "nrKubernetesOtel.endpoint" . }}
        headers:
          api-key: ${env:NEW_RELIC_LICENSE_KEY}
      nrcollectorexporter:
        endpoint: https://staging-log-api.newrelic.com
        sending_queue:
          enabled: false
        compression: gzip
        encoding: json
        nr_license_key: ${env:NEW_RELIC_LICENSE_KEY}
      usageexporter:
        endpoint: {{ include "nrCollector.endpoint" . }}/external-usage
        headers:
          api-key: ${env:NEW_RELIC_LICENSE_KEY}

    service:
      extensions: [ healthcheckv2 ]

      pipelines:
        logs/nr:
          receivers: [nrproprietaryreceiver]
          processors: [nrprocessor]
          exporters: [nrcollectorexporter]
        logs/otlp:
          receivers: [ otlp ]
          processors: [ nrprocessor ]
          exporters: [ otlp ]
        metrics/nr:
          receivers: [nrproprietaryreceiver]
          processors: [nrprocessor]
          exporters: [nrcollectorexporter]
        metrics/otlp:
          receivers: [otlp]
          processors: [ nrprocessor]
          exporters: [otlp]
        traces/otlp:
          receivers: [otlp]
          processors: [nrprocessor]
          exporters: [ otlp ]
        traces/nr:
          receivers: [ nrproprietaryreceiver ]
          processors: [ nrprocessor ]
          exporters: [ nrcollectorexporter ]
        metrics/ui:
          receivers: [prometheus/ui]
          processors: []
          exporters: [otlphttp]
        metrics/usage:
          receivers: [prometheus/usage]
          processors: [cumulativetodelta]
          exporters: [usageexporter]
        metrics/monitoring:
          receivers: [prometheus/monitoring]
          processors: []
          exporters: [otlphttp]

      telemetry:
        {{- if include "newrelic.common.verboseLog" . }}
        logs:
          level: "debug"
        {{- end }}
        {{- if include "nrKubernetesOtel.lowDataMode" . }}
        metrics:
          level: info
        {{- else}}
        metrics:
          level: detailed
        {{- end }}
    {{- end }}